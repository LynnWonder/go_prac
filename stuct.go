package main

import "fmt"

/**
结构体类型的字面量由关键字type、类型名称、关键字struct，以及由花括号包裹的若干字段声明组成。
其中，每个字段声明独占一行并由字段名称（可选）和字段类型组成。

 与代表函数值的字面量类似，我们在编写一个结构体值的字面量时不需要先拟好其类型。这样的结构体字面量被称为匿名结构体。与匿名函数类似，我们在编写匿名结构体的时候需要先写明其类型特征（包含若干字段声明），再写出它的值初始化部分。下面，我们依照结构体类型Person创建一个匿名结构体：
 */
type Personn struct {
	Name   string
	Gender string
	Age    uint8
}
// 讲指针的时候会再进行讲解
func (person *Personn) Grow() {
	person.Age++
}
func main() {
	// 与代表函数值的字面量类似，我们在编写一个结构体值的字面量时不需要先拟好其类型。
	//这样的结构体字面量被称为匿名结构体。与匿名函数类似，我们在编写匿名结构体的时候需要先写明其类型特征（包含若干字段声明），再写出它的值初始化部分。
	//下面，我们依照结构体类型Person创建一个匿名结构体，与此同时匿名结构体是不能有方法的


	// 熟悉面向对象编程的同学可能已经意识到，包含若干字段和方法的结构体类型就相当于一个把属性和操作封装在一起的对象。
	// 不过要注意，与对象不同的是，结构体类型（以及任何类型）之间都不可能存在继承关系。
	// 实际上，在Go语言中并没有继承的概念。不过，我们可以通过在结构体类型的声明中添加匿名字段（或称嵌入类型）来模仿继承
	p := struct {
		Name   string
		Gender string
		Age    uint8
	}{"Robert", "Male", 33}
	fmt.Printf("value of p: %v\n", p)
	q :=Personn{"Tom", "Male", 30}
	q.Grow()
	fmt.Printf("value of q: %v\n", q)
}