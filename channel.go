package main

import "fmt"

/**
通道（Channel）是 Go 语言中一种非常独特的数据结构。
它可用于在不同 Goroutine 之间传递类型化的数据，并且是并发安全的，它会阻塞等待并发协程返回消息。
相比之下，我们之前介绍的那些数据类型都不是并发安全的。这一点需要特别注意。

Goroutine（也称为 Go 程序）可以被看做是承载可被并发执行的代码块的载体。
它们由 Go 语言的运行时系统调度，并依托操作系统线程（又称内核线程）来并发地执行其中的代码块。

make 函数可接受两个参数。第一个参数是代表了将被初始化的值的类型的字面量,而第二个参数则是值的长度。
 */
func main()  {

	// 通道值的长度应该被称为其缓存的尺寸。
	// 换句话说，它代表着通道值中可以暂存的数据的个数。
	// 注意，暂存在通道值中的数据是先进先出的，即：越早被放入（或称发送）到通道值的数据会越先被取出（或称接收）

	// 声明并赋值一个 channel 类型
	ch1 := make(chan string, 5)
	// 发送字符串
	ch1 <- "channel value"
	// 接收字符串并赋值给其他
	//value := <- ch1

	// 这样做的目的同样是为了消除与零值有关的歧义。
	// 这里的变量ok的值同样是bool类型的。
	// 它代表了通道值的状态，true代表通道值有效，而false则代表通道值已无效（或称已关闭）。
	v,ok :=<- ch1
	fmt.Printf("received from ch1: %v, has?: %v", v, ok)

}